{"remainingRequest":"C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\src\\views\\employee\\EmployeeDialog.vue?vue&type=template&id=6915eae6&","dependencies":[{"path":"C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\src\\views\\employee\\EmployeeDialog.vue","mtime":1635913153907},{"path":"C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635681448612},{"path":"C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1635681450716},{"path":"C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635681448612},{"path":"C:\\Users\\tienanh\\Desktop\\Demo-Vue\\demo_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1635681448989}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}